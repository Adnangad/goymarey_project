// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  email         String    @unique
  password      String
  date_of_birth DateTime
  gender        Gender
  imageUrl      String?
  followedBy    Follows[] @relation("followedBy")
  following     Follows[] @relation("following")
  posts         Posts[]
  Like          Like[]
}

model Follows {
  followedBy User @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade)

  // followedById: the users id that is following ie who is following
  followedById Int

  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  // followingId: the users id that is followed ie who is being followed
  followingId Int

  @@id([followingId, followedById])
}

model Posts {
  id         Int       @id @default(autoincrement())
  user_id    Int
  content    String
  likes      Int       @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  edited     Boolean   @default(false)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Like       Like[]

  @@index([user_id])
}

model Like {
  id      Int     @id @default(autoincrement())
  user_id Int
  liked   Boolean @default(false)
  post_id Int
  post    Posts   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id], name: "user_id_post_id")
}
